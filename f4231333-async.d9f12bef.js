(("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@antv/g6-site"]=("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@antv/g6-site"]||[]).push([["f4231333"],{f4231333:function(n,e,r){"use strict";r.d(e,"__esModule",{value:!0}),r.d(e,"texts",{enumerable:!0,get:function(){return t;}}),r("b25839dd");let t=[{value:"\u53C2\u8003\u4E0B\u9762\u7684\u793A\u4F8B\uFF0C\u4F60\u53EF\u4EE5\u5728 React \u4E2D\u4F7F\u7528 G6\uFF0C\u4E5F\u53EF\u4EE5\u67E5\u770B ",paraId:0,tocIndex:0},{value:"\u5728\u7EBF\u793A\u4F8B",paraId:0,tocIndex:0},{value:" \u3002",paraId:0,tocIndex:0},{value:"import { Graph } from '@antv/g6';\nimport { useEffect, useRef } from 'react';\n\nexport default () => {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const graph = new Graph({\n      container: containerRef.current!,\n      width: 500,\n      height: 500,\n      data: {\n        nodes: [\n          {\n            id: 'node-1',\n            style: { x: 50, y: 100 },\n          },\n          {\n            id: 'node-2',\n            style: { x: 150, y: 100 },\n          },\n        ],\n        edges: [{ id: 'edge-1', source: 'node-1', target: 'node-2' }],\n      },\n    });\n\n    graph.render();\n  }, []);\n\n  return <div ref={containerRef} />;\n};\n",paraId:1,tocIndex:0},{value:"\u5728\u4E25\u683C\u6A21\u5F0F\u4E0B\uFF0CReact \u4F1A\u4E8C\u6B21\u66F4\u65B0\u5BFC\u81F4 G6 \u91CD\u590D\u521B\u5EFA Graph \u5B9E\u4F8B\u5E76\u9500\u6BC1\uFF0C\u53EF\u4EE5\u53C2\u8003\u5982\u4E0B\u793A\u4F8B\u89E3\u51B3\uFF1A",paraId:2,tocIndex:1},{value:"import type { GraphOptions } from '@antv/g6';\nimport { Graph as G6Graph } from '@antv/g6';\nimport { useEffect, useRef } from 'react';\n\nexport interface GraphProps {\n  options: GraphOptions;\n  onRender?: (graph: G6Graph) => void;\n  onDestroy?: () => void;\n}\n\nexport const Graph = (props: GraphProps) => {\n  const { options, onRender, onDestroy } = props;\n  const graphRef = useRef<G6Graph>();\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const graph = new G6Graph({ container: containerRef.current! });\n    graphRef.current = graph;\n\n    return () => {\n      const graph = graphRef.current;\n      if (graph) {\n        graph.destroy();\n        onDestroy?.();\n        graphRef.current = undefined;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    const graph = graphRef.current;\n\n    if (!options || !container || !graph || graph.destroyed) return;\n\n    graph.setOptions(options);\n    graph\n      .render()\n      .then(() => onRender?.(graph))\n      // eslint-disable-next-line no-console\n      .catch((error) => console.debug(error));\n  }, [options]);\n\n  return <div ref={containerRef} style={{ width: '100%', height: '100%' }} />;\n};\n",paraId:3,tocIndex:1}];}}]);
//# sourceMappingURL=f4231333-async.d9f12bef.js.map