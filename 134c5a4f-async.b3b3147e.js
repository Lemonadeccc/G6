(("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@antv/g6-site"]=("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@antv/g6-site"]||[]).push([["134c5a4f"],{"134c5a4f":function(n,e,r){"use strict";r.d(e,"__esModule",{value:!0}),r.d(e,"texts",{enumerable:!0,get:function(){return t;}}),r("93b06d7d");let t=[{value:"Refer to the example below, you can use G6 in React, and you can also view the ",paraId:0,tocIndex:0},{value:"Live Example",paraId:0,tocIndex:0},{value:" \u3002",paraId:0,tocIndex:0},{value:"import { Graph } from '@antv/g6';\nimport { useEffect, useRef } from 'react';\n\nexport default () => {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const graph = new Graph({\n      container: containerRef.current!,\n      width: 500,\n      height: 500,\n      data: {\n        nodes: [\n          {\n            id: 'node-1',\n            style: { x: 50, y: 100 },\n          },\n          {\n            id: 'node-2',\n            style: { x: 150, y: 100 },\n          },\n        ],\n        edges: [{ id: 'edge-1', source: 'node-1', target: 'node-2' }],\n      },\n    });\n\n    graph.render();\n  }, []);\n\n  return <div ref={containerRef} />;\n};\n",paraId:1,tocIndex:0},{value:"In strict mode, React will update twice, causing G6 to create and destroy the Graph instance repeatedly. You can refer to the following example to solve this problem:",paraId:2,tocIndex:1},{value:"import type { GraphOptions } from '@antv/g6';\nimport { Graph as G6Graph } from '@antv/g6';\nimport { useEffect, useRef } from 'react';\n\nexport interface GraphProps {\n  options: GraphOptions;\n  onRender?: (graph: G6Graph) => void;\n  onDestroy?: () => void;\n}\n\nexport const Graph = (props: GraphProps) => {\n  const { options, onRender, onDestroy } = props;\n  const graphRef = useRef<G6Graph>();\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const graph = new G6Graph({ container: containerRef.current! });\n    graphRef.current = graph;\n\n    return () => {\n      const graph = graphRef.current;\n      if (graph) {\n        graph.destroy();\n        onDestroy?.();\n        graphRef.current = undefined;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    const graph = graphRef.current;\n\n    if (!options || !container || !graph || graph.destroyed) return;\n\n    graph.setOptions(options);\n    graph\n      .render()\n      .then(() => onRender?.(graph))\n      // eslint-disable-next-line no-console\n      .catch((error) => console.debug(error));\n  }, [options]);\n\n  return <div ref={containerRef} style={{ width: '100%', height: '100%' }} />;\n};\n",paraId:3,tocIndex:1}];}}]);
//# sourceMappingURL=134c5a4f-async.b3b3147e.js.map