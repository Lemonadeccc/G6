(("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@antv/g6-site"]=("undefined"!=typeof globalThis?globalThis:self)["makoChunk_@antv/g6-site"]||[]).push([["f4ac7169"],{f4ac7169:function(e,a,n){"use strict";n.d(a,"__esModule",{value:!0}),n.d(a,"texts",{enumerable:!0,get:function(){return t;}}),n("3ba0ca2c");let t=[{value:"@antv/g6",paraId:0},{value:" > ",paraId:1},{value:"MapNodeSizeOptions",paraId:2},{value:"export interface MapNodeSizeOptions extends BaseTransformOptions\n",paraId:3,tocIndex:0},{value:"Extends:",paraId:4,tocIndex:0},{value:" ",paraId:4,tocIndex:0},{value:"BaseTransformOptions",paraId:5,tocIndex:0},{value:"Property",paraId:6,tocIndex:1},{value:"Type",paraId:7,tocIndex:1},{value:"Default Value",paraId:8,tocIndex:1},{value:"Description",paraId:9,tocIndex:1},{value:"centrality",paraId:10,tocIndex:1},{value:"{ type: 'degree'; direction?: ",paraId:11,tocIndex:1},{value:"EdgeDirection",paraId:12,tocIndex:1},{value:"; } | { type: 'betweenness'; directed?: boolean; weightPropertyName?: string; } | { type: 'closeness'; directed?: boolean; weightPropertyName?: string; } | { type: 'eigenvector'; directed?: boolean; } | { type: 'pagerank'; epsilon?: number; linkProb?: number; } | ((graphData: ",paraId:11,tocIndex:1},{value:"GraphData",paraId:13,tocIndex:1},{value:") => Map<",paraId:11,tocIndex:1},{value:"ID",paraId:14,tocIndex:1},{value:", number>)",paraId:11,tocIndex:1},{value:"type: 'eigenvector'",paraId:15,tocIndex:1},{value:"(Optional)",paraId:16,tocIndex:1},{value:" The method of measuring the node centrality",paraId:16,tocIndex:1},{value:"'degree'",paraId:17,tocIndex:1},{value:": Degree centrality, measures centrality by the degree (number of connected edges) of a node. Nodes with high degree centrality usually have more direct connections and may play important roles in the network",paraId:17,tocIndex:1},{value:"'betweenness'",paraId:18,tocIndex:1},{value:": Betweenness centrality, measures centrality by the number of times a node appears in all shortest paths. Nodes with high betweenness centrality usually act as bridges in the network, controlling the flow of information",paraId:18,tocIndex:1},{value:"'closeness'",paraId:19,tocIndex:1},{value:": Closeness centrality, measures centrality by the reciprocal of the average shortest path length from a node to all other nodes. Nodes with high closeness centrality usually can reach other nodes in the network more quickly",paraId:19,tocIndex:1},{value:"'eigenvector'",paraId:20,tocIndex:1},{value:": Eigenvector centrality, measures centrality by the degree of connection between a node and other central nodes. Nodes with high eigenvector centrality usually connect to other important nodes",paraId:20,tocIndex:1},{value:"'pagerank'",paraId:21,tocIndex:1},{value:": PageRank centrality, measures centrality by the number of times a node is referenced by other nodes, commonly used in directed graphs. Nodes with high PageRank centrality usually have high influence in the network, similar to the page ranking algorithm",paraId:21,tocIndex:1},{value:"Custom centrality calculation method: ",paraId:22,tocIndex:1},{value:"(graphData: GraphData) => Map<ID, number>",paraId:22,tocIndex:1},{value:", where ",paraId:22,tocIndex:1},{value:"graphData",paraId:22,tocIndex:1},{value:" is the graph data, and ",paraId:22,tocIndex:1},{value:"Map<ID, number>",paraId:22,tocIndex:1},{value:" is the mapping from node ID to centrality value",paraId:22,tocIndex:1},{value:"maxSize",paraId:23,tocIndex:1},{value:"Size",paraId:24,tocIndex:1},{value:"80",paraId:25,tocIndex:1},{value:"(Optional)",paraId:26,tocIndex:1},{value:" The maximum size of the node",paraId:26,tocIndex:1},{value:"minSize",paraId:27,tocIndex:1},{value:"Size",paraId:28,tocIndex:1},{value:"20",paraId:29,tocIndex:1},{value:"(Optional)",paraId:30,tocIndex:1},{value:" The minimum size of the node",paraId:30,tocIndex:1},{value:"scale",paraId:31,tocIndex:1},{value:"'linear' | 'log' | 'pow' | 'sqrt' | ((value: number, domain: [number, number], range: [number, number]) => number)",paraId:32,tocIndex:1},{value:"'log'",paraId:33,tocIndex:1},{value:"(Optional)",paraId:34,tocIndex:1},{value:" Scale type",paraId:34,tocIndex:1},{value:"'linear'",paraId:35,tocIndex:1},{value:": Linear scale, maps a value from one range to another range linearly, commonly used for cases where the difference in centrality values is small",paraId:35,tocIndex:1},{value:"'log'",paraId:36,tocIndex:1},{value:": Logarithmic scale, maps a value from one range to another range logarithmically, commonly used for cases where the difference in centrality values is large",paraId:36,tocIndex:1},{value:"'pow'",paraId:37,tocIndex:1},{value:": Power-law scale, maps a value from one range to another range using power law, commonly used for cases where the difference in centrality values is large",paraId:37,tocIndex:1},{value:"'sqrt'",paraId:38,tocIndex:1},{value:": Square root scale, maps a value from one range to another range using square root, commonly used for cases where the difference in centrality values is large",paraId:38,tocIndex:1},{value:"Custom scale: ",paraId:39,tocIndex:1},{value:"(value: number, domain: [number, number], range: [number, number]) => number",paraId:39,tocIndex:1},{value:"\uFF0Cwhere ",paraId:39,tocIndex:1},{value:"value",paraId:39,tocIndex:1},{value:" is the value to be mapped, ",paraId:39,tocIndex:1},{value:"domain",paraId:39,tocIndex:1},{value:" is the input range, and ",paraId:39,tocIndex:1},{value:"range",paraId:39,tocIndex:1},{value:" is the output range",paraId:39,tocIndex:1}];}}]);
//# sourceMappingURL=f4ac7169-async.ba829264.js.map